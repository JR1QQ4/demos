// 1.块级作用域
// let 取代 var
// 全局常量和线程安全

// 2.字符串
// 静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。

// 3.解构赋值
// 使用数组成员对变量赋值时，优先使用解构赋值
// 函数的参数如果是对象的成员，优先使用解构赋值。
// 如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。

// 4.对象
// 单行定义的对象，最后一个成员不以逗号结尾。
//   多行定义的对象，最后一个成员以逗号结尾。
// 对象尽量静态化，一旦定义，就不得随意添加新的属性。
//   如果添加属性不可避免，要使用Object.assign方法。
// 如果对象的属性名是动态的，可以在创造对象的时候，使用属性表达式定义

// 5.数组
// 使用扩展运算符（...）拷贝数组
// 使用 Array.from 方法，将类似数组的对象转为数组

// 6.函数
// 立即执行函数可以写成箭头函数的形式
//   使用匿名函数当作参数的场合，尽量用箭头函数代替
// 箭头函数取代Function.prototype.bind，不应再用 self/_this/that 绑定 this
// 简单的、单行的、不会复用的函数，建议采用箭头函数。如果函数体较为复杂，行数较多，还是应该采用传统的函数写法。
// 所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数
// 不要在函数体内使用 arguments 变量，使用 rest 运算符（...）代替
// 使用默认值语法设置函数参数的默认值

// 7.Map
// 注意区分 Object 和 Map，只有模拟现实世界的实体对象时，才使用 Object。
// 如果只是需要key: value的数据结构，使用 Map 结构。因为 Map 有内建的遍历机制。

// 8.Class
// 总是用 Class，取代需要 prototype 的操作。因为 Class 的写法更简洁，更易于理解
// 使用extends实现继承，因为这样更简单，不会有破坏instanceof运算的危险

// 9.模块
// 使用import取代require。
// 使用export取代module.exports
// 如果模块只有一个输出值，就使用export default，如果模块有多个输出值，就不使用export default，
// export default与普通的export不要同时使用。
// 不要在模块输入中使用通配符。因为这样可以确保你的模块之中，有一个默认输出（export default）。
// 如果模块默认输出一个函数，函数名的首字母应该小写
// 如果模块默认输出一个对象，对象名的首字母应该大写

// 10.ESLint 的使用
// ESLint 是一个语法规则和代码风格的检查工具，可以用来保证写出语法正确、风格统一的代码
// $ npm i -g eslint
// 安装 Airbnb 语法规则，以及 import、a11y、react 插件
// $ npm i -g eslint-config-airbnb
// $ npm i -g eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react
// 新建一个.eslintrc文件，配置 ESLint
{
  // "extends": "eslint-config-airbnb"
}
